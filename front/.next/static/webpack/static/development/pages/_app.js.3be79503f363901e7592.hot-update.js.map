{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.3be79503f363901e7592.hot-update.js","sources":["webpack:///./components/LoginForm.js","webpack:///./pages/signup.js"],"sourcesContent":["import React, {useState,useCallback} from 'react'; \r\nimport {Form} from 'antd'\r\nimport {useInput} from '../pages/signup'; //<- export const 받는 방법 \r\n/*\r\n        export const useInput =(initValue = null) =>{\r\n            const [value,setter] = useState(initValue); \r\n            const handler = useCallback((e) =>{\r\n                setter(e.target.value); \r\n            },[])\r\n            return [value,handler]; \r\n        }\r\n\r\n*/\r\n\r\nconst LoginForm = () =>{\r\n\r\n    const [id,onChangeId] = useState(''); \r\n    const [password,onChangePassword] = useState(''); \r\n\r\n    const onSubmitForm =useCallback((e) =>{\r\n        e.preventDefault(); \r\n        console.log({\r\n            id,password\r\n        })\r\n    },[]); \r\n\r\n    return (\r\n\r\n        <Form onSubmit={onSubmitForm}>\r\n            <div>\r\n                <label htmlFor=\"user-id\"  value={id} onChange={onChangeId} >아이디</label>\r\n                <br />\r\n                <input name=\"user-id\" />\r\n            </div>\r\n            <div>\r\n            <label htmlFor=\"user-password\" value={password} onChange={onChangePassword}>패스워드</label>\r\n                <br />\r\n                <input type=\"password\" name=\"user-password\"  />\r\n            </div>\r\n            <div>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={false}>로그인</Button>\r\n                <Link href=\"/signup\"><a><Button>회원가입</Button></a></Link>\r\n            </div>\r\n        </Form>\r\n\r\n    ); \r\n\r\n\r\n\r\n}\r\n\r\nexport default LoginForm; \r\n","import React, {useState,useCallback,memo} from 'react'\r\nimport {Form,Input,Checkbox, Button} from 'antd'\r\nimport PropTypes from 'prop-types'; \r\n\r\n//props로 넘겨주는 함수는 useCallback 필수 \r\n// useCallback(callback,[]);\r\n\r\n//setState는 전체 리렌더링된다. \r\n\r\n//지나친 최적화 \r\n// const TextInput = memo(({value,onChange}) =>{\r\n\r\n//     return (\r\n//         <Input name=\"user-id\" value={value} required onChange={onChange}/>\r\n//     ); \r\n// }); \r\n\r\n\r\n const TextInput =({value}) =>{\r\n\r\n     return (\r\n     <div>{value}</div>\r\n   ); \r\n }; \r\n \r\n TextInput.propTypes = {\r\n    value : PropTypes.string,\r\n }\r\n\r\n    //커스텀 hooks\r\n    //export const 시 다른데서 import해서 사용할 수 있다. \r\n    export const useInput =(initValue = null) =>{\r\n        const [value,setter] = useState(initValue); \r\n        const handler = useCallback((e) =>{\r\n            setter(e.target.value); \r\n        },[])\r\n        return [value,handler]; \r\n    }\r\n\r\n\r\nconst Signup = () =>{\r\n\r\n      \r\n        const [id,onChangeId] = useInput(''); \r\n        const [nick,onChangeNick] = useInput(''); \r\n        const [password,onChangePassword] = useInput(''); \r\n        \r\n        const [passwordCheck, setPasswordCheck] = useState(''); \r\n        const [term, setTerm] = useState(false); \r\n        const [passwordError,setPasswordError] = useState(false); \r\n        const [termError,setTermError] = useState(false); \r\n\r\n        const onSubmit = useCallback((e) =>{\r\n            e.preventDefault();\r\n            if(password !== passwordCheck){\r\n                return setPasswordError(true); \r\n            }\r\n\r\n            if(!term){\r\n                return setTermError(true); \r\n            }\r\n        },[password,passwordCheck,term]);\r\n\r\n        const passwordChk  = useCallback((e) =>{\r\n            setPasswordError(e.target.value !== password); \r\n            setPasswordCheck(e.target.value);\r\n        },[password]) \r\n        \r\n        const onchangeTerm  = useCallback((e) =>{\r\n            setTermError(false); \r\n            console.log(e.target.checked); \r\n            setTerm(e.target.checked); \r\n        },[]);\r\n\r\n\r\n\r\n       \r\n        \r\n\r\n    return( \r\n        <>\r\n            <Form onSubmit={onSubmit} style={{padding:10}}>\r\n                    <TextInput value={1234}></TextInput>\r\n                    <div>\r\n                        <label htmlFor=\"user-id\">아이디</label>\r\n                        <br />\r\n                       <Input name=\"user-id\" value={id} required onChange={onChangeId}/>\r\n                        {/*<TextInput value={id} required onChange={onChangeId}/>*/}\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"user-nick\">닉네임</label>\r\n                        <br />\r\n                         <Input name=\"user-nick\" value={nick} required onChange={onChangeNick}/>\r\n                       {/*<TextInput value={nick} required onChange={onChangeNick}/>*/}\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"user-password\">비밀번호</label>\r\n                        <br />\r\n                        <Input name=\"user-password\" value={password} type=\"password\" required onChange={onChangePassword}/>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"user-password-check\">비밀번호확인</label>\r\n                        <br />\r\n                        <Input name=\"user-password-check\" value={passwordCheck} type=\"password\" required onChange={passwordChk}/>\r\n                        {passwordError && <div style={{color:\"red\"}}>비밀번호가 다릅니다.</div>}\r\n                        </div>\r\n                    <div>\r\n                    <Checkbox name=\"user-term\"  onChange={onchangeTerm}>동의 하시겠습니까?</Checkbox>\r\n                    {termError && <div style={{color:\"red\"}}>약관에 동의 하셔야 합니다.</div>}\r\n                    </div>\r\n                    <div style={{marginTop:10}}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">가입하기</Button>\r\n                    </div>\r\n            </Form>\r\n        </>\r\n    ); \r\n}\r\n\r\nexport default Signup;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AADA;AAGA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}
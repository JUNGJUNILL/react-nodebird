{"ast":null,"code":"var _jsxFileName = \"c:\\\\git Repository\\\\react-nodebird\\\\front\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useEffect } from 'react'; //next에서는 이거 안해도 된다. \n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { Form, Input, Checkbox, Button, Card, Icon, Avatar } from 'antd';\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport { loginAction, logOutAction, LOG_IN, LOG_OUT } from '../reducers/user'; //react hooks 나오기 전 방식 \n//const Home = ({user,dispath,login,logout}) =>{\n//react hooks방식\n\nvar Home = function Home() {\n  var dispath = useDispatch(); //리덕스 액션 실행기 \n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector.user,\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts; //useSelector로 리덕스 state전체를 가져올 수 있다. \n  //useState가 useSelector로 바뀌었다고 생각하자.\n\n\n  console.log(user);\n  useEffect(function () {\n    // dispath({\n    //     type:LOG_IN, \n    //     data:{\n    //         nickname:'준일정',\n    //     }\n    // })\n    dispath(loginAction);\n  }, []);\n  /*\r\n  useEffect(()=>{\r\n  \r\n      login(); \r\n  \r\n  },[])\r\n  */\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, user ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"\\uB85C\\uADF8\\uC778 \\uD588\\uC2B5\\uB2C8\\uB2E4.\", user.nickname) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"\\uB85C\\uADF8\\uC544\\uC6C3 \\uD588\\uC2B5\\uB2C8\\uB2E4.\"), isLoggedIn && __jsx(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), mainPosts.map(function (v, i) {\n    return __jsx(PostCard, {\n      key: v,\n      v: v,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }));\n};\n/*\r\n//리덕스 state를 리엑트 props로 만들겠다.\r\n//react hooks 나오기 전 방식 \r\nfunction mapStateToProps(state){\r\n    return {\r\n        user:state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispath){\r\n    return{\r\n        login: ()=>dispath(loginAction), \r\n        logout:()=>dispath(logOutAction), \r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n*/\n\n\nexport default Home;","map":{"version":3,"sources":["c:/git Repository/react-nodebird/front/pages/index.js"],"names":["react","useEffect","PostForm","PostCard","Form","Input","Checkbox","Button","Card","Icon","Avatar","useDispatch","useSelector","connect","loginAction","logOutAction","LOG_IN","LOG_OUT","Home","dispath","state","user","isLoggedIn","post","mainPosts","console","log","nickname","map","v","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CAAsC;;AACtC,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,IAAR,EAAaC,KAAb,EAAmBC,QAAnB,EAA4BC,MAA5B,EAAmCC,IAAnC,EAAwCC,IAAxC,EAA6CC,MAA7C,QAA0D,MAA1D;AACA,SAAQC,WAAR,EAAoBC,WAApB,EAAiCC,OAAjC,QAA+C,aAA/C;AACA,SAASC,WAAT,EAAqBC,YAArB,EAAoCC,MAApC,EAA4CC,OAA5C,QAA0D,kBAA1D,C,CAEI;AACA;AAED;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAK;AAEjB,MAAMC,OAAO,GAAGR,WAAW,EAA3B,CAFiB,CAEc;;AAFd,qBAISC,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAEA,KAAK,CAACC,IAAR;AAAA,GAAN,CAJpB;AAAA,MAIVA,IAJU,gBAIVA,IAJU;AAAA,MAILC,UAJK,gBAILA,UAJK;;AAAA,sBAKKV,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAEA,KAAK,CAACG,IAAR;AAAA,GAAN,CALhB;AAAA,MAKVC,SALU,iBAKVA,SALU,EAMJ;AACA;;;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACApB,EAAAA,SAAS,CAAC,YAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACAkB,IAAAA,OAAO,CAACL,WAAD,CAAP;AAEH,GATQ,EASP,EATO,CAAT;AAWJ;;;;;;;;AAOI,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKO,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAeA,IAAI,CAACM,QAApB,CAAH,GAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADlD,EAEKL,UAAU,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFnB,EAGKE,SAAS,CAACI,GAAV,CAAc,UAACC,CAAD,EAAGC,CAAH,EAAO;AAClB,WACQ,MAAC,QAAD;AAAW,MAAA,GAAG,EAAED,CAAhB;AAAmB,MAAA,CAAC,EAAEA,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR;AAGH,GAJA,CAHL,CAFJ;AAYH,CAxCE;AAyCH;;;;;;;;;;;;;;;;;;;AAiBA,eAAgBX,IAAhB","sourcesContent":["import react,{useEffect} from 'react' //next에서는 이거 안해도 된다. \r\nimport PostForm from '../components/PostForm'; \r\nimport PostCard from '../components/PostCard'; \r\nimport {Form,Input,Checkbox,Button,Card,Icon,Avatar} from 'antd'\r\nimport {useDispatch,useSelector, connect} from 'react-redux'\r\nimport { loginAction,logOutAction , LOG_IN, LOG_OUT} from '../reducers/user';\r\n\r\n    //react hooks 나오기 전 방식 \r\n    //const Home = ({user,dispath,login,logout}) =>{\r\n\r\n   //react hooks방식\r\n   const Home = () =>{\r\n \r\n    const dispath = useDispatch(); //리덕스 액션 실행기 \r\n\r\n    const {user,isLoggedIn} = useSelector(state=>state.user); \r\n    const {mainPosts}   = useSelector(state=>state.post); \r\n                 //useSelector로 리덕스 state전체를 가져올 수 있다. \r\n                 //useState가 useSelector로 바뀌었다고 생각하자.\r\n\r\n    console.log(user); \r\n    useEffect(()=>{\r\n        // dispath({\r\n        //     type:LOG_IN, \r\n        //     data:{\r\n        //         nickname:'준일정',\r\n        //     }\r\n        // })\r\n        dispath(loginAction); \r\n\r\n    },[]); \r\n\r\n/*\r\nuseEffect(()=>{\r\n\r\n    login(); \r\n\r\n},[])\r\n*/\r\n    return (\r\n       \r\n        <div>\r\n            {user ? <div>로그인 했습니다.{user.nickname}</div> : <div>로그아웃 했습니다.</div>}\r\n            {isLoggedIn && <PostForm />}\r\n            {mainPosts.map((v,i)=>{\r\n                return (\r\n                        <PostCard  key={v} v={v}/>\r\n                        );\r\n            })}\r\n        </div>\r\n    ); \r\n}; \r\n/*\r\n//리덕스 state를 리엑트 props로 만들겠다.\r\n//react hooks 나오기 전 방식 \r\nfunction mapStateToProps(state){\r\n    return {\r\n        user:state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispath){\r\n    return{\r\n        login: ()=>dispath(loginAction), \r\n        logout:()=>dispath(logOutAction), \r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n*/\r\nexport default (Home); "]},"metadata":{},"sourceType":"module"}
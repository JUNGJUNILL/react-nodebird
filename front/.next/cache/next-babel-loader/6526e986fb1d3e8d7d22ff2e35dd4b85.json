{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: []\n};\nconst ADD_POST = 'ADD_POST';\nconst ADD_DUMMY = 'ADD_DUMMY';\nconst addPost = {\n  type: ADD_POST\n};\nconst addDummy = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'Hello',\n    UserId: 1,\n    User: {\n      nickname: '주닐정'\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_DUMMY:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data, ...state.mainPosts]\n        });\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["c:/git Repository/react-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","ADD_POST","ADD_DUMMY","addPost","type","addDummy","data","content","UserId","User","nickname","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAG;AADY,CAArB;AAKP,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAEH;AADM,CAAhB;AAIA,MAAMI,QAAQ,GAAG;AACbD,EAAAA,IAAI,EAACF,SADQ;AAEbI,EAAAA,IAAI,EAAC;AACDC,IAAAA,OAAO,EAAC,OADP;AAEDC,IAAAA,MAAM,EAAC,CAFN;AAGDC,IAAAA,IAAI,EAAG;AACHC,MAAAA,QAAQ,EAAC;AADN;AAHN;AAFQ,CAAjB;;AAaA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAwBc,MAAxB,KAAiC;AAE7C,UAAOA,MAAM,CAACT,IAAd;AAEI,SAAKH,QAAL;AAAc;AACV,iCACOW,KADP;AAGH;;AACD,SAAKV,SAAL;AAAe;AACX,iCACOU,KADP;AAEIZ,UAAAA,SAAS,EAAC,CAACa,MAAM,CAACP,IAAR,EAAc,GAAGM,KAAK,CAACZ,SAAvB;AAFd;AAIH;AAZL;AAiBH,CAnBD;;AAqBA,eAAeW,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts : [], \r\n}\r\n\r\n\r\nconst ADD_POST = 'ADD_POST'; \r\nconst ADD_DUMMY = 'ADD_DUMMY'; \r\n\r\nconst addPost = {\r\n    type: ADD_POST,\r\n}\r\n\r\nconst addDummy = {\r\n    type:ADD_DUMMY,\r\n    data:{\r\n        content:'Hello',\r\n        UserId:1,\r\n        User : {\r\n            nickname:'주닐정',\r\n        },\r\n    },\r\n};\r\n\r\n\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case ADD_POST:{\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case ADD_DUMMY:{\r\n            return {\r\n                ...state,\r\n                mainPosts:[action.data, ...state.mainPosts],\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"c:\\\\git Repository\\\\react-nodebird\\\\front\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useEffect } from 'react'; //next에서는 이거 안해도 된다. \n\nimport { Form, Input, Checkbox, Button, Card, Icon, Avatar } from 'antd';\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport { loginAction, logOutAction, LOG_IN, LOG_OUT } from '../reducers/user'; //react hooks 나오기 전 방식 \n//const Home = ({user,dispath,login,logout}) =>{\n//react hooks방식\n\nvar Home = function Home() {\n  var dispath = useDispatch(); //리덕스 액션 실행기 \n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector.user,\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts; //useSelector로 리덕스 state전체를 가져올 수 있다. \n  //useState가 useSelector로 바뀌었다고 생각하자.\n\n\n  console.log(user);\n  useEffect(function () {\n    // dispath({\n    //     type:LOG_IN, \n    //     data:{\n    //         nickname:'준일정',\n    //     }\n    // })\n    dispath(loginAction);\n  }, []);\n  /*\r\n  useEffect(()=>{\r\n  \r\n      login(); \r\n  \r\n  },[])\r\n  */\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, user ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"\\uB85C\\uADF8\\uC778 \\uD588\\uC2B5\\uB2C8\\uB2E4.\", user.nickname) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"\\uB85C\\uADF8\\uC544\\uC6C3 \\uD588\\uC2B5\\uB2C8\\uB2E4.\"), isLoggedIn && __jsx(Form, {\n    style: {\n      marginBottom: 20\n    },\n    encType: \"multipart/form-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB2C8?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, dummy.imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        display: 'inline-block'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\" + v,\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"\\uC81C\\uAC70\")));\n  }))), dummy.mainPosts.map(function (v, i) {\n    return __jsx(Card, {\n      key: i,\n      cover: v.img && __jsx(\"img\", {\n        alt: \"example\",\n        src: v.img,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }),\n      actions: [__jsx(Icon, {\n        type: \"retweet\",\n        key: \"retweet\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), __jsx(Icon, {\n        type: \"heart\",\n        key: \"heart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), __jsx(Icon, {\n        type: \"message\",\n        key: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), __jsx(Icon, {\n        type: \"ellipsis\",\n        key: \"ellipsis\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })],\n      extra: __jsx(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"\\uD314\\uB85C\\uC6B0\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(Card.Meta, {\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, v.User.nickname[0]),\n      title: v.User.nickname,\n      description: v.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }));\n};\n/*\r\n//리덕스 state를 리엑트 props로 만들겠다.\r\n//react hooks 나오기 전 방식 \r\nfunction mapStateToProps(state){\r\n    return {\r\n        user:state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispath){\r\n    return{\r\n        login: ()=>dispath(loginAction), \r\n        logout:()=>dispath(logOutAction), \r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n*/\n\n\nexport default Home;","map":{"version":3,"sources":["c:/git Repository/react-nodebird/front/pages/index.js"],"names":["react","useEffect","Form","Input","Checkbox","Button","Card","Icon","Avatar","useDispatch","useSelector","connect","loginAction","logOutAction","LOG_IN","LOG_OUT","Home","dispath","state","user","isLoggedIn","post","mainPosts","console","log","nickname","marginBottom","dummy","imagePaths","map","v","i","display","width","img","User","content"],"mappings":"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","sourcesContent":["import react,{useEffect} from 'react' //next에서는 이거 안해도 된다. \r\nimport {Form,Input,Checkbox,Button,Card,Icon,Avatar} from 'antd'\r\nimport {useDispatch,useSelector, connect} from 'react-redux'\r\nimport { loginAction,logOutAction , LOG_IN, LOG_OUT} from '../reducers/user';\r\n\r\n    //react hooks 나오기 전 방식 \r\n    //const Home = ({user,dispath,login,logout}) =>{\r\n\r\n   //react hooks방식\r\n   const Home = () =>{\r\n \r\n    const dispath = useDispatch(); //리덕스 액션 실행기 \r\n\r\n    const {user,isLoggedIn} = useSelector(state=>state.user); \r\n    const {mainPosts} = useSelector(state=>state.post); \r\n                 //useSelector로 리덕스 state전체를 가져올 수 있다. \r\n                 //useState가 useSelector로 바뀌었다고 생각하자.\r\n\r\n    console.log(user); \r\n    useEffect(()=>{\r\n        // dispath({\r\n        //     type:LOG_IN, \r\n        //     data:{\r\n        //         nickname:'준일정',\r\n        //     }\r\n        // })\r\n        dispath(loginAction); \r\n\r\n    },[]); \r\n\r\n/*\r\nuseEffect(()=>{\r\n\r\n    login(); \r\n\r\n},[])\r\n*/\r\n    return (\r\n       \r\n        <div>\r\n            {user ? <div>로그인 했습니다.{user.nickname}</div> : <div>로그아웃 했습니다.</div>}\r\n            {isLoggedIn && <Form style={{marginBottom: 20}} encType=\"multipart/form-data\">\r\n                <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었니?\"/>\r\n                <div>\r\n                    <input type=\"file\" multiple hidden />\r\n                    <Button>이미지 업로드</Button>\r\n                    <Button type=\"primary\" style={{float:'right'}} htmlType=\"submit\">짹짹</Button>\r\n                </div>\r\n                <div>\r\n                    {dummy.imagePaths.map((v,i)=>{\r\n                        return (\r\n                                <div key={i} style={{ display:'inline-block'}}>\r\n                                    <img src={`http://localhost:3065/`+v} style={{width:'200px'}} alt={v} />\r\n                                    <div>\r\n                                        <Button>제거</Button>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n\r\n            </Form>}\r\n            {dummy.mainPosts.map((v,i)=>{\r\n                return (\r\n                    <Card key={i}\r\n                        cover={v.img && <img alt=\"example\" src={v.img}/>}\r\n                        actions={[\r\n                                    <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                                    <Icon type=\"heart\" key=\"heart\"/>,\r\n                                    <Icon type=\"message\" key=\"message\"/>,\r\n                                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>,\r\n                        ]}\r\n                        extra={<Button>팔로우</Button>}\r\n                    >\r\n                        <Card.Meta \r\n                            avatar={<Avatar>{v.User.nickname[0]}</Avatar>}\r\n                            title={v.User.nickname}\r\n                            description={v.content}\r\n                        />\r\n\r\n                    </Card>\r\n                );\r\n            })}\r\n        </div>\r\n    ); \r\n}; \r\n/*\r\n//리덕스 state를 리엑트 props로 만들겠다.\r\n//react hooks 나오기 전 방식 \r\nfunction mapStateToProps(state){\r\n    return {\r\n        user:state.user,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispath){\r\n    return{\r\n        login: ()=>dispath(loginAction), \r\n        logout:()=>dispath(logOutAction), \r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n*/\r\nexport default (Home); "]},"metadata":{},"sourceType":"module"}